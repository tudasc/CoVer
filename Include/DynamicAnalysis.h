#pragma once

#include <stdint.h>

/*
 * This is a simplified version of the ContractTree,
 * using c-native types.
 * This representation is generated by the instrumentation pass
 * for use with dynamic tools.
 */

struct Tag_t {
    const char* tag;
    int64_t param;
    bool operator<(const Tag_t other) const { return tag < other.tag && param < other.param;}
};

struct TagsMap_t {
    void** functions; // List of function pointers
    Tag_t* tags; // List of tags (matching above funcptr)
    int64_t count;
};

// Number must match those defined in ContractTree.hpp!
enum ParamAccess : int64_t { NORMAL = 0, DEREF = 1, ADDROF = 2 };
struct CallParam_t {
    int64_t callP;
    int64_t callPisTagVar; // Read as bool
    int64_t contrP;
    ParamAccess accType;
};

struct RWOp_t {
    int64_t idx;
    ParamAccess accType;
    int64_t isWrite;
};
struct CallOp_t {
    const char* function_name;
    CallParam_t* params;
    int64_t num_params;
    void* target_function;
};
struct CallTagOp_t {
    const char* target_tag;
    CallParam_t* params;
    int64_t num_params;
};
struct ReleaseOp_t {
    void** release_op;
    int64_t release_op_kind;
    void** forbidden_op;
    int64_t forbidden_op_kind;
};

// Number must match those defined in enums in ContractTree.hpp (operation + connective)!
enum ContractConnective : int64_t { UNARY_READ = 0, UNARY_WRITE = 1, UNARY_CALL = 2, UNARY_CALLTAG = 3, UNARY_RELEASE = 4, AND = 5, OR = 6, XOR = 7 };
struct ContractFormula_t {
    ContractFormula_t* children;
    int64_t num_children;
    ContractConnective conn;
    const char* msg;
    void** data; // Only filled if conn == UNARY. Pointer to corresponding operation struct.
};

struct Contract_t {
    ContractFormula_t* precondition;
    ContractFormula_t* postcondition;
    void* function;
    const char* function_name;
};

struct ContractDB_t {
    Contract_t* contracts;
    int64_t num_contracts;
    TagsMap_t tagMap;
};

#ifdef __cplusplus
extern "C" {
#endif

// Callback function declarations
void PPDCV_Initialize(ContractDB_t* DB);
void PPDCV_FunctionCallback(void* function, int64_t num_params, ...); // Funcptr, num params, then: param type (0=int,1=ptr) and param in loop
void PPDCV_MemRCallback(void* buf);
void PPDCV_MemWCallback(void* buf);

#ifdef __cplusplus
}
#endif
